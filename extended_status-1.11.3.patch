diff --git a/src/core/ngx_connection.c b/src/core/ngx_connection.c
index 16ba630..653c3cb 100644
--- a/src/core/ngx_connection.c
+++ b/src/core/ngx_connection.c
@@ -1033,6 +1033,10 @@ ngx_get_connection(ngx_socket_t s, ngx_log_t *log)
     ngx_event_t       *rev, *wev;
     ngx_connection_t  *c;
 
+#if (NGX_STAT_EXTENDED)
+    conn_score        *cs;
+#endif
+
     /* disable warning: Win32 SOCKET is u_int while UNIX socket is int */
 
     if (ngx_cycle->files && (ngx_uint_t) s >= ngx_cycle->files_n) {
@@ -1068,8 +1072,16 @@ ngx_get_connection(ngx_socket_t s, ngx_log_t *log)
     rev = c->read;
     wev = c->write;
 
+#if (NGX_STAT_EXTENDED)
+    cs = c->cs;
+#endif
+
     ngx_memzero(c, sizeof(ngx_connection_t));
 
+#if (NGX_STAT_EXTENDED)
+    c->cs = cs;
+#endif
+
     c->read = rev;
     c->write = wev;
     c->fd = s;
@@ -1208,7 +1220,7 @@ ngx_reusable_connection(ngx_connection_t *c, ngx_uint_t reusable)
     if (c->reusable) {
         ngx_queue_remove(&c->queue);
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
         (void) ngx_atomic_fetch_add(ngx_stat_waiting, -1);
 #endif
     }
@@ -1221,7 +1233,7 @@ ngx_reusable_connection(ngx_connection_t *c, ngx_uint_t reusable)
         ngx_queue_insert_head(
             (ngx_queue_t *) &ngx_cycle->reusable_connections_queue, &c->queue);
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
         (void) ngx_atomic_fetch_add(ngx_stat_waiting, 1);
 #endif
     }
diff --git a/src/core/ngx_connection.h b/src/core/ngx_connection.h
index e484c81..1a3902e 100644
--- a/src/core/ngx_connection.h
+++ b/src/core/ngx_connection.h
@@ -123,6 +123,11 @@ typedef enum {
 
 
 struct ngx_connection_s {
+
+#if (NGX_STAT_EXTENDED)
+    void               *cs;
+#endif
+
     void               *data;
     ngx_event_t        *read;
     ngx_event_t        *write;
diff --git a/src/event/ngx_event.c b/src/event/ngx_event.c
index 9d6c4c9..af0ebda 100644
--- a/src/event/ngx_event.c
+++ b/src/event/ngx_event.c
@@ -57,7 +57,7 @@ ngx_msec_t            ngx_accept_mutex_delay;
 ngx_int_t             ngx_accept_disabled;
 
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
 
 ngx_atomic_t   ngx_stat_accepted0;
 ngx_atomic_t  *ngx_stat_accepted = &ngx_stat_accepted0;
@@ -76,7 +76,28 @@ ngx_atomic_t  *ngx_stat_waiting = &ngx_stat_waiting0;
 
 #endif
 
+#if (NGX_STAT_EXTENDED)
 
+ngx_atomic_t   ngx_stat_ssl_handshakes0 ;
+ngx_atomic_t  *ngx_stat_ssl_handshakes = &ngx_stat_ssl_handshakes0 ;
+
+ngx_atomic_t   ngx_stat_reused_sessions0 ;
+ngx_atomic_t  *ngx_stat_reused_sessions = &ngx_stat_reused_sessions0 ;
+
+ngx_atomic_t   ngx_stat_session_cache_hits0 ;
+ngx_atomic_t  *ngx_stat_session_cache_hits = &ngx_stat_session_cache_hits0 ;
+
+ngx_atomic_t   ngx_stat_session_cache_misses0 ;
+ngx_atomic_t  *ngx_stat_session_cache_misses = &ngx_stat_session_cache_misses0 ;
+
+
+ngx_uint_t      ngx_num_workers;
+size_t          shm_size = 0;
+worker_score   *workers;
+conn_score     *conns;
+worker_score   *my_worker;
+
+#endif
 
 static ngx_command_t  ngx_events_commands[] = {
 
@@ -327,6 +348,40 @@ ngx_handle_read_event(ngx_event_t *rev, ngx_uint_t flags)
     return NGX_OK;
 }
 
+#if (NGX_STAT_EXTENDED)
+
+static void
+init_request_cnt(request_cnt *recent_request_cnt)
+{
+    ngx_uint_t  i;
+
+    for (i = 0; i < RECENT_PERIOD; i++) {
+        recent_request_cnt[i].time = 0;
+        recent_request_cnt[i].cnt = 0;
+    }
+}
+
+
+static void
+init_workers(worker_score *workers)
+{
+    worker_score  *ws;
+    ngx_uint_t  i;
+
+    for (i = 0; i < ngx_num_workers; i++)
+    {
+        ws = (worker_score *)((char *) workers + WORKER_SCORE_LEN * i);
+
+        ws->pid = 0;
+        ws->access_count = 0;
+        ws->bytes_sent = 0;
+        ws->mode = SERVER_READY;
+
+        init_request_cnt(ws->recent_request_cnt);
+    }
+}
+
+#endif
 
 ngx_int_t
 ngx_handle_write_event(ngx_event_t *wev, size_t lowat)
@@ -475,7 +530,13 @@ ngx_event_module_init(ngx_cycle_t *cycle)
     }
 
     if (ngx_accept_mutex_ptr) {
+#if (NGX_STAT_EXTENDED)
+        shm.addr = (u_char *) ngx_accept_mutex_ptr;
+        shm.size = shm_size;
+        ngx_shm_free(&shm);
+#else
         return NGX_OK;
+#endif
     }
 
 
@@ -487,7 +548,7 @@ ngx_event_module_init(ngx_cycle_t *cycle)
            + cl          /* ngx_connection_counter */
            + cl;         /* ngx_temp_number */
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
 
     size += cl           /* ngx_stat_accepted */
            + cl          /* ngx_stat_handled */
@@ -499,6 +560,25 @@ ngx_event_module_init(ngx_cycle_t *cycle)
 
 #endif
 
+#if (NGX_STAT_EXTENDED)
+
+    size += cl ;         /* ngx_stat_ssl_handshakes  */
+    size += cl ;         /* ngx_stat_reused_sessions */
+    size += cl ;         /* ngx_stat_session_cache_hits */
+    size += cl ;         /* ngx_stat_session_cache_misses */
+
+    if (WORKER_SCORE_LEN < sizeof(worker_score)) {
+        ngx_log_error(NGX_LOG_EMERG, cycle->log, 0, "worker_score(%d) too large", sizeof(worker_score ));
+        return NGX_ERROR;
+    }
+
+    size += (WORKER_SCORE_LEN * ccf->worker_processes)
+        + (sizeof(conn_score) * ccf->worker_processes * cycle->connection_n);
+
+    shm_size = size;
+
+#endif
+
     shm.size = size;
     shm.name.len = sizeof("nginx_shared_zone") - 1;
     shm.name.data = (u_char *) "nginx_shared_zone";
@@ -534,7 +614,7 @@ ngx_event_module_init(ngx_cycle_t *cycle)
 
     ngx_random_number = (tp->msec << 16) + ngx_pid;
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
 
     ngx_stat_accepted = (ngx_atomic_t *) (shared + 3 * cl);
     ngx_stat_handled = (ngx_atomic_t *) (shared + 4 * cl);
@@ -546,6 +626,22 @@ ngx_event_module_init(ngx_cycle_t *cycle)
 
 #endif
 
+#if (NGX_STAT_EXTENDED)
+
+    ngx_stat_ssl_handshakes = (ngx_atomic_t *) (shared + 10 * cl);
+    ngx_stat_reused_sessions = (ngx_atomic_t *) (shared + 11 * cl);
+    ngx_stat_session_cache_hits = (ngx_atomic_t *) (shared + 12 * cl);
+    ngx_stat_session_cache_misses = (ngx_atomic_t *) (shared + 13 * cl); 
+
+    ngx_num_workers = ccf->worker_processes;
+
+    workers = (worker_score *) (shared + 14 * cl);
+    init_workers(workers);
+
+    conns = (conn_score *) (shared + 14 * cl + ccf->worker_processes * WORKER_SCORE_LEN);
+
+#endif
+
     return NGX_OK;
 }
 
@@ -689,6 +785,34 @@ ngx_event_process_init(ngx_cycle_t *cycle)
 
     c = cycle->connections;
 
+#if (NGX_STAT_EXTENDED)
+    {
+        ngx_time_t  *tp;
+        conn_score  *cs;
+        ngx_uint_t    i;
+
+        for (i = 0; i < cycle->connection_n; i++)
+        {
+            c [i].cs = (void *) ((char *) conns +
+                                 sizeof(conn_score) * (ngx_process_slot * cycle->connection_n + i));
+            cs = (conn_score *) c[i].cs;
+
+            cs->bytes_sent = 0;
+            cs->response_time = 0;
+            cs->upstream_response_time = -1;
+            cs->request[0] = '\0';
+            cs->client[0] = '\0';
+            cs->vhost[0] = '\0';
+
+            tp = ngx_timeofday();
+            cs->last_used = tp->sec;
+            cs->status = 0;
+            cs->zin = 0;
+            cs->zout = 0;
+        }
+    }
+#endif
+
     cycle->read_events = ngx_alloc(sizeof(ngx_event_t) * cycle->connection_n,
                                    cycle->log);
     if (cycle->read_events == NULL) {
diff --git a/src/event/ngx_event.h b/src/event/ngx_event.h
index 27139ee..ff59f12 100644
--- a/src/event/ngx_event.h
+++ b/src/event/ngx_event.h
@@ -8,6 +8,9 @@
 #ifndef _NGX_EVENT_H_INCLUDED_
 #define _NGX_EVENT_H_INCLUDED_
 
+#if (NGX_STAT_EXTENDED)
+#include <sys/times.h>
+#endif
 
 #include <ngx_config.h>
 #include <ngx_core.h>
@@ -474,7 +477,7 @@ extern ngx_msec_t             ngx_accept_mutex_delay;
 extern ngx_int_t              ngx_accept_disabled;
 
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
 
 extern ngx_atomic_t  *ngx_stat_accepted;
 extern ngx_atomic_t  *ngx_stat_handled;
@@ -486,6 +489,63 @@ extern ngx_atomic_t  *ngx_stat_waiting;
 
 #endif
 
+#if (NGX_STAT_EXTENDED)
+
+extern ngx_atomic_t  *ngx_stat_ssl_handshakes ;
+extern ngx_atomic_t  *ngx_stat_reused_sessions ;
+extern ngx_atomic_t  *ngx_stat_session_cache_hits ;
+extern ngx_atomic_t  *ngx_stat_session_cache_misses ;
+
+#define  SCORE__REQUEST_LEN           128
+#define  SCORE__CLIENT_LEN             32
+#define  SCORE__VHOST_LEN              32
+
+#define  CL_SIZE                      128
+#define  WORKER_SCORE_LEN             640      /* 128 X 5 */
+
+#define  SERVER_READY                 '-'
+#define  SERVER_BUSY_READ             'R'
+#define  SERVER_BUSY_WRITE            'W'
+#define  SERVER_BUSY_LOG              'L'
+
+#define  RECENT_PERIOD                64
+#define  RECENT_MASK          0x0000003F
+
+typedef struct {
+    uint32_t  time;
+    uint32_t  cnt;
+} request_cnt;
+
+
+typedef struct {
+    request_cnt     recent_request_cnt[RECENT_PERIOD];
+    struct  tms     times;
+    time_t          last_used;
+    ngx_uint_t      bytes_sent;
+    ngx_uint_t      access_count;
+    ngx_pid_t       pid;
+    ngx_uint_t      active_conn;
+    char            mode;
+} worker_score;
+
+typedef struct {
+    u_char  request[SCORE__REQUEST_LEN];
+    u_char  client[SCORE__CLIENT_LEN];
+    u_char  vhost[SCORE__VHOST_LEN];
+    time_t          last_used;
+    ngx_uint_t      bytes_sent;
+    ngx_msec_int_t  response_time;
+    ngx_msec_int_t  upstream_response_time;
+    ngx_uint_t      status;
+    size_t          zin;
+    size_t          zout;
+} conn_score;
+
+extern  worker_score  *workers;
+extern  worker_score  *my_worker;
+extern  conn_score    *conns;
+
+#endif
 
 #define NGX_UPDATE_TIME         1
 #define NGX_POST_EVENTS         2
diff --git a/src/event/ngx_event_accept.c b/src/event/ngx_event_accept.c
index 4445adc..1443077 100644
--- a/src/event/ngx_event_accept.c
+++ b/src/event/ngx_event_accept.c
@@ -9,7 +9,6 @@
 #include <ngx_core.h>
 #include <ngx_event.h>
 
-
 static ngx_int_t ngx_enable_accept_events(ngx_cycle_t *cycle);
 static ngx_int_t ngx_disable_accept_events(ngx_cycle_t *cycle, ngx_uint_t all);
 static void ngx_close_accepted_connection(ngx_connection_t *c);
@@ -134,7 +133,7 @@ ngx_event_accept(ngx_event_t *ev)
             return;
         }
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
         (void) ngx_atomic_fetch_add(ngx_stat_accepted, 1);
 #endif
 
@@ -154,10 +153,14 @@ ngx_event_accept(ngx_event_t *ev)
 
         c->type = SOCK_STREAM;
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
         (void) ngx_atomic_fetch_add(ngx_stat_active, 1);
 #endif
 
+#if (NGX_STAT_EXTENDED)
+        my_worker->active_conn += 1 ;
+#endif
+
         c->pool = ngx_create_pool(ls->pool_size, ev->log);
         if (c->pool == NULL) {
             ngx_close_accepted_connection(c);
@@ -257,7 +260,7 @@ ngx_event_accept(ngx_event_t *ev)
 
         c->number = ngx_atomic_fetch_add(ngx_connection_counter, 1);
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
         (void) ngx_atomic_fetch_add(ngx_stat_handled, 1);
 #endif
 
@@ -416,7 +419,7 @@ ngx_event_recvmsg(ngx_event_t *ev)
             return;
         }
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
         (void) ngx_atomic_fetch_add(ngx_stat_accepted, 1);
 #endif
 
@@ -440,10 +443,14 @@ ngx_event_recvmsg(ngx_event_t *ev)
         c->type = SOCK_DGRAM;
         c->socklen = msg.msg_namelen;
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
         (void) ngx_atomic_fetch_add(ngx_stat_active, 1);
 #endif
 
+#if (NGX_STAT_EXTENDED)
+        my_worker->active_conn += 1 ;
+#endif
+
         c->pool = ngx_create_pool(ls->pool_size, ev->log);
         if (c->pool == NULL) {
             ngx_close_accepted_connection(c);
@@ -579,7 +586,7 @@ ngx_event_recvmsg(ngx_event_t *ev)
 
         c->number = ngx_atomic_fetch_add(ngx_connection_counter, 1);
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
         (void) ngx_atomic_fetch_add(ngx_stat_handled, 1);
 #endif
 
@@ -756,9 +763,17 @@ ngx_close_accepted_connection(ngx_connection_t *c)
         ngx_destroy_pool(c->pool);
     }
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
     (void) ngx_atomic_fetch_add(ngx_stat_active, -1);
 #endif
+
+#if (NGX_STAT_EXTENDED)
+    if ( 0 < my_worker->active_conn )
+        my_worker->active_conn -= 1 ;
+    else
+        ngx_log_error( NGX_LOG_EMERG, c->log, 0,
+                       "ngx_close_accepted_connection(): active_conn is zero" ) ;
+#endif
 }
 
 
diff --git a/src/event/ngx_event_openssl.c b/src/event/ngx_event_openssl.c
index bb9a900..b447261 100644
--- a/src/event/ngx_event_openssl.c
+++ b/src/event/ngx_event_openssl.c
@@ -1202,6 +1202,14 @@ ngx_ssl_handshake(ngx_connection_t *c)
             return NGX_ERROR;
         }
 
+#if (NGX_STAT_EXTENDED)
+        (void) ngx_atomic_fetch_add( ngx_stat_ssl_handshakes, 1 ) ;
+        if ( SSL_session_reused( c->ssl->connection ) ) 
+        {
+            (void) ngx_atomic_fetch_add( ngx_stat_reused_sessions, 1 ) ;
+        }
+#endif
+
 #if (NGX_DEBUG)
         {
         char         buf[129], *s, *d;
@@ -2412,6 +2420,7 @@ ngx_ssl_new_session(ngx_ssl_conn_t *ssl_conn, ngx_ssl_session_t *sess)
     ngx_ssl_session_cache_t  *cache;
     u_char                    buf[NGX_SSL_MAX_SESSION_SIZE];
 
+
     len = i2d_SSL_SESSION(sess, NULL);
 
     /* do not cache too big session */
@@ -2619,6 +2628,16 @@ ngx_ssl_get_cached_session(ngx_ssl_conn_t *ssl_conn,
                 p = buf;
                 sess = d2i_SSL_SESSION(NULL, &p, sess_id->len);
 
+#if (NGX_STAT_EXTENDED)
+                if ( NULL == sess )
+                {
+                    (void) ngx_atomic_fetch_add(ngx_stat_session_cache_misses, 1);
+                }
+                else
+                {
+                    (void) ngx_atomic_fetch_add(ngx_stat_session_cache_hits, 1);
+                }
+#endif
                 return sess;
             }
 
@@ -2644,6 +2663,17 @@ done:
 
     ngx_shmtx_unlock(&shpool->mutex);
 
+#if (NGX_STAT_EXTENDED)
+    if ( NULL == sess )
+    {
+        (void) ngx_atomic_fetch_add(ngx_stat_session_cache_misses, 1);
+    }
+    else
+    {
+        (void) ngx_atomic_fetch_add(ngx_stat_session_cache_hits, 1);
+    }
+#endif
+
     return sess;
 }
 
diff --git a/src/http/modules/ngx_http_gzip_filter_module.c b/src/http/modules/ngx_http_gzip_filter_module.c
index 536fdf8..73394f9 100644
--- a/src/http/modules/ngx_http_gzip_filter_module.c
+++ b/src/http/modules/ngx_http_gzip_filter_module.c
@@ -862,6 +862,15 @@ ngx_http_gzip_filter_deflate(ngx_http_request_t *r, ngx_http_gzip_ctx_t *ctx)
 
         r->connection->buffered &= ~NGX_HTTP_GZIP_BUFFERED;
 
+#if (NGX_STAT_EXTENDED)
+        {
+            conn_score  *cs = r->connection->cs;
+
+            cs->zin = ctx->zin;
+            cs->zout = ctx->zout;
+        }
+#endif
+
         return NGX_OK;
     }
 
diff --git a/src/http/ngx_http_request.c b/src/http/ngx_http_request.c
index 6ff7903..aae3de9 100644
--- a/src/http/ngx_http_request.c
+++ b/src/http/ngx_http_request.c
@@ -605,12 +605,16 @@ ngx_http_create_request(ngx_connection_t *c)
     ctx->current_request = r;
     r->log_handler = ngx_http_log_error_handler;
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
     (void) ngx_atomic_fetch_add(ngx_stat_reading, 1);
     r->stat_reading = 1;
     (void) ngx_atomic_fetch_add(ngx_stat_requests, 1);
 #endif
 
+#if (NGX_STAT_EXTENDED)
+    my_worker->mode = SERVER_BUSY_READ;
+#endif
+
     return r;
 }
 
@@ -1900,13 +1904,17 @@ ngx_http_process_request(ngx_http_request_t *r)
         ngx_del_timer(c->read);
     }
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
     (void) ngx_atomic_fetch_add(ngx_stat_reading, -1);
     r->stat_reading = 0;
     (void) ngx_atomic_fetch_add(ngx_stat_writing, 1);
     r->stat_writing = 1;
 #endif
 
+#if (NGX_STAT_EXTENDED)
+    my_worker->mode = SERVER_BUSY_WRITE;
+#endif
+
     c->read->handler = ngx_http_request_handler;
     c->write->handler = ngx_http_request_handler;
     r->read_event_handler = ngx_http_block_reading;

@@ -3381,6 +3412,61 @@ ngx_http_post_action(ngx_http_request_t *r)
     return NGX_OK;
 }
 
+#if (NGX_STAT_EXTENDED)
+
+static inline void
+update_request_cnt(worker_score *worker, conn_score *cs, uint32_t sec)
+{
+    uint32_t  index;
+
+    index = sec & RECENT_MASK;
+    if (sec == worker->recent_request_cnt[index].time) {
+        worker->recent_request_cnt[index].cnt += 1;
+    }
+    else {
+        worker->recent_request_cnt[index].time = sec;
+        worker->recent_request_cnt[index].cnt = 1;
+    }
+}
+
+
+static inline  ngx_msec_int_t
+get_response_time(ngx_time_t *tp, ngx_http_request_t *r)
+{
+    ngx_msec_int_t  ms;
+
+    ms = (ngx_msec_int_t) ((tp->sec - r->start_sec) * 1000 + (tp->msec - r->start_msec));
+    ms = ( 0 <= ms ) ? ms : 0;
+
+    return ms;
+}
+
+
+static inline  ngx_msec_int_t
+get_proxy_response_time(ngx_http_request_t  *r)
+{
+    ngx_http_upstream_state_t  *state;
+    ngx_msec_int_t  ms = -1;
+    ngx_uint_t  i;
+
+    if (NULL != r->upstream_states && 0 < r->upstream_states->nelts)
+    {
+        state = r->upstream_states->elts;
+        for (i = 0; i < r->upstream_states->nelts; i++)
+        {
+            if (0 != state[i].status)
+            {
+                ms = state [i].response_time;
+                ms = (0 <= ms) ? ms : 0;
+                break;
+            }
+        }
+    }
+
+    return ms;
+}
+
+#endif
 
 static void
 ngx_http_close_request(ngx_http_request_t *r, ngx_int_t rc)
@@ -3425,6 +3511,11 @@ ngx_http_free_request(ngx_http_request_t *r, ngx_int_t rc)
     ngx_http_log_ctx_t        *ctx;
     ngx_http_core_loc_conf_t  *clcf;
 
+#if (NGX_STAT_EXTENDED)
+    conn_score  *cs = r->connection->cs;
+    ngx_time_t  *tp ;
+#endif
+
     log = r->connection->log;
 
     ngx_log_debug0(NGX_LOG_DEBUG_HTTP, log, 0, "http close request");
@@ -3445,7 +3536,7 @@ ngx_http_free_request(ngx_http_request_t *r, ngx_int_t rc)
         cln = cln->next;
     }
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
 
     if (r->stat_reading) {
         (void) ngx_atomic_fetch_add(ngx_stat_reading, -1);
@@ -3463,6 +3554,47 @@ ngx_http_free_request(ngx_http_request_t *r, ngx_int_t rc)
 
     log->action = "logging request";
 
+#if (NGX_STAT_EXTENDED)
+    my_worker->mode = SERVER_BUSY_LOG ;
+
+    if (0 < r->headers_in.server.len &&  NULL != r->request_line.data) {
+
+        tp = ngx_timeofday();
+
+        if (my_worker->last_used != tp->sec)
+            times(&(my_worker->times ));
+
+        my_worker->last_used = tp->sec;
+        cs->last_used = tp->sec;
+
+        cs->response_time = get_response_time(tp, r);
+        cs->upstream_response_time = get_proxy_response_time(r);
+
+        my_worker->bytes_sent += r->connection->sent;
+        cs->bytes_sent = r->connection->sent;
+
+        my_worker->access_count++;
+
+        update_request_cnt(my_worker, cs, (uint32_t) tp->sec);
+
+        cs->status = r->err_status ? r->err_status : r->headers_out.status;
+
+        if (NULL != r->connection->addr_text.data) {
+            ngx_cpystrn(cs->client, r->connection->addr_text.data,
+                        r->connection->addr_text.len >= SCORE__CLIENT_LEN ?
+                        SCORE__CLIENT_LEN : (r->connection->addr_text.len + 1));
+        }
+        if (0 < r->headers_in.server.len) {
+            ngx_cpystrn(cs->vhost, r->headers_in.server.data, SCORE__VHOST_LEN <= r->headers_in.server.len ?
+                        SCORE__VHOST_LEN : (r->headers_in.server.len + 1));
+        }
+        if (NULL != r->request_line.data) {
+            ngx_cpystrn(cs->request, r->request_line.data, r->request_line.len >= SCORE__REQUEST_LEN ?
+                        SCORE__REQUEST_LEN : (r->request_line.len + 1));
+        }
+    }
+#endif
+
     ngx_http_log_request(r);
 
     log->action = "closing request";
@@ -3500,6 +3632,10 @@ ngx_http_free_request(ngx_http_request_t *r, ngx_int_t rc)
     r->pool = NULL;
 
     ngx_destroy_pool(pool);
+
+#if (NGX_STAT_EXTENDED)
+    my_worker->mode = SERVER_READY;
+#endif
 }
 
 
@@ -3540,10 +3676,18 @@ ngx_http_close_connection(ngx_connection_t *c)
 
 #endif
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
     (void) ngx_atomic_fetch_add(ngx_stat_active, -1);
 #endif
 
+#if (NGX_STAT_EXTENDED)
+    if ( 0 < my_worker->active_conn )
+        my_worker->active_conn -= 1 ;
+    else
+        ngx_log_error( NGX_LOG_ALERT, c->log, 0,
+                       "ngx_http_close_connection(): active_conn is zero" ) ;
+#endif
+
     c->destroyed = 1;
 
     pool = c->pool;
diff --git a/src/http/ngx_http_request.h b/src/http/ngx_http_request.h
index 499c1ef..e27c636 100644
--- a/src/http/ngx_http_request.h
+++ b/src/http/ngx_http_request.h
@@ -540,7 +540,7 @@ struct ngx_http_request_s {
     unsigned                          single_range:1;
     unsigned                          disable_not_modified:1;
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
     unsigned                          stat_reading:1;
     unsigned                          stat_writing:1;
 #endif
diff --git a/src/os/unix/ngx_process.c b/src/os/unix/ngx_process.c
index 24a63fb..488181c 100644
--- a/src/os/unix/ngx_process.c
+++ b/src/os/unix/ngx_process.c
@@ -35,6 +35,10 @@ ngx_socket_t     ngx_channel;
 ngx_int_t        ngx_last_process;
 ngx_process_t    ngx_processes[NGX_MAX_PROCESSES];
 
+#if (NGX_STAT_EXTENDED)
+ngx_int_t        old_ngx_last_process = 0;
+ngx_process_t    old_ngx_processes[NGX_MAX_PROCESSES];
+#endif
 
 ngx_signal_t  signals[] = {
     { ngx_signal_value(NGX_RECONFIGURE_SIGNAL),
diff --git a/src/os/unix/ngx_process.h b/src/os/unix/ngx_process.h
index 7b5e8c0..705e709 100644
--- a/src/os/unix/ngx_process.h
+++ b/src/os/unix/ngx_process.h
@@ -84,5 +84,9 @@ extern ngx_int_t      ngx_process_slot;
 extern ngx_int_t      ngx_last_process;
 extern ngx_process_t  ngx_processes[NGX_MAX_PROCESSES];
 
+#if (NGX_STAT_EXTENDED)
+extern ngx_int_t      old_ngx_last_process;
+extern ngx_process_t  old_ngx_processes[NGX_MAX_PROCESSES];
+#endif
 
 #endif /* _NGX_PROCESS_H_INCLUDED_ */
diff --git a/src/os/unix/ngx_process_cycle.c b/src/os/unix/ngx_process_cycle.c
index 7cee1c5..16ec390 100644
--- a/src/os/unix/ngx_process_cycle.c
+++ b/src/os/unix/ngx_process_cycle.c
@@ -231,6 +231,15 @@ ngx_master_process_cycle(ngx_cycle_t *cycle)
 
             ngx_log_error(NGX_LOG_NOTICE, cycle->log, 0, "reconfiguring");
 
+#if (NGX_STAT_EXTENDED)
+            old_ngx_last_process = ngx_last_process;
+            for (i = 0; i < old_ngx_last_process; i++)
+                old_ngx_processes[i] = ngx_processes[i];
+
+            ngx_last_process = 0;
+            ngx_process_slot = 0;
+#endif
+
             cycle = ngx_init_cycle(cycle);
             if (cycle == NULL) {
                 cycle = (ngx_cycle_t *) ngx_cycle;
@@ -488,6 +497,72 @@ ngx_signal_worker_processes(ngx_cycle_t *cycle, int signo)
 
     ch.fd = -1;
 
+#if (NGX_STAT_EXTENDED)
+    if ( NGX_CMD_QUIT == ch.command && 0 < old_ngx_last_process )
+    {
+        for (i = 0; i < old_ngx_last_process; i++) {
+            ngx_log_debug7(NGX_LOG_DEBUG_EVENT, cycle->log, 0,
+                           "child: %d %P e:%d t:%d d:%d r:%d j:%d",
+                           i,
+                           old_ngx_processes[i].pid,
+                           old_ngx_processes[i].exiting,
+                           old_ngx_processes[i].exited,
+                           old_ngx_processes[i].detached,
+                           old_ngx_processes[i].respawn,
+                           old_ngx_processes[i].just_spawn);
+
+            if (old_ngx_processes[i].detached || old_ngx_processes[i].pid == -1)
+                continue;
+
+            if (old_ngx_processes[i].exiting && signo == ngx_signal_value( NGX_SHUTDOWN_SIGNAL))
+                continue;
+
+            if (ch.command) {
+                if (ngx_write_channel(old_ngx_processes[i].channel[0], &ch, sizeof(ngx_channel_t), cycle->log) == NGX_OK) {
+                    if (signo != ngx_signal_value(NGX_REOPEN_SIGNAL))
+                        old_ngx_processes[i].exiting = 1;
+
+                    continue;
+                }
+            }
+
+            ngx_log_debug2(NGX_LOG_DEBUG_CORE, cycle->log, 0,
+                           "kill (%P, %d)", old_ngx_processes[i].pid, signo);
+
+            if (kill(old_ngx_processes[i].pid, signo) == -1) {
+                err = ngx_errno;
+                ngx_log_error(NGX_LOG_ALERT, cycle->log, err,
+                              "kill(%P, %d) failed", old_ngx_processes[i].pid, signo);
+
+                if (err == NGX_ESRCH) {
+                    old_ngx_processes[i].exited = 1;
+                    old_ngx_processes[i].exiting = 0;
+                    ngx_reap = 1;
+                }
+                continue;
+            }
+
+            if (signo != ngx_signal_value(NGX_REOPEN_SIGNAL))
+                old_ngx_processes[i].exiting = 1;
+        }
+
+        for (i = 0; i < old_ngx_last_process; i++) {
+
+            ngx_close_channel( old_ngx_processes[i].channel, cycle->log ) ;
+
+            old_ngx_processes[i].channel[0] = -1 ;
+            old_ngx_processes[i].channel[1] = -1 ;
+        }
+
+        old_ngx_last_process = -1;
+
+        for (i = 0; i < ngx_last_process; i++) {
+            ngx_processes [i].just_spawn = 0 ;
+        }
+
+        return ;
+    }
+#endif
 
     for (i = 0; i < ngx_last_process; i++) {
 
@@ -735,6 +810,22 @@ ngx_worker_process_cycle(ngx_cycle_t *cycle, void *data)
 
     ngx_setproctitle("worker process");
 
+#if (NGX_STAT_EXTENDED)
+    {
+        my_worker = (worker_score *) ((char *) workers + WORKER_SCORE_LEN * ngx_process_slot);
+        ngx_time_t  *tp = ngx_timeofday();
+
+        my_worker->last_used = tp->sec;
+        my_worker->pid = ngx_getpid();
+        my_worker->bytes_sent = 0L;
+        my_worker->access_count = 0L;
+        my_worker->active_conn = 0L;
+        my_worker->mode = SERVER_READY;
+
+        times(&my_worker->times);
+    }
+#endif
+
     for ( ;; ) {
 
         if (ngx_exiting) {
diff --git a/src/stream/ngx_stream_handler.c b/src/stream/ngx_stream_handler.c
index 61169e1..bbd8b12 100644
--- a/src/stream/ngx_stream_handler.c
+++ b/src/stream/ngx_stream_handler.c
@@ -312,10 +312,18 @@ ngx_stream_close_connection(ngx_connection_t *c)
 
 #endif
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
     (void) ngx_atomic_fetch_add(ngx_stat_active, -1);
 #endif
 
+#if (NGX_STAT_EXTENDED)
+    if ( 0 < my_worker->active_conn )
+        my_worker->active_conn -= 1 ;
+    else
+        ngx_log_error( NGX_LOG_ALERT, c->log, 0,
+                       "ngx_stream_close_connection(): active_conn is zero" ) ;
+#endif
+
     pool = c->pool;
 
     ngx_close_connection(c);
